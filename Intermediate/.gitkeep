# Java Stream API Tutorials

This repository provides a comprehensive guide to the Java Stream API, which is part of the `java.util.stream` package introduced in Java 8. Streams allow you to process collections of objects in a functional style.

## Table of Contents
1. [What is a Stream?](#what-is-a-stream)
2. [Stream Operations](#stream-operations)
   - [Intermediate Operations](#intermediate-operations)
   - [Terminal Operations](#terminal-operations)
3. [Stream Creation](#stream-creation)
4. [Stream API Syntax](#stream-api-syntax)

---

### What is a Stream?

A **Stream** in Java is a sequence of elements supporting sequential and parallel aggregate operations. Streams are not data structures; they are pipelines that allow data to be processed in a functional style.

- **Stream Operations**: Streams allow operations like filtering, mapping, reducing, and more.
- **Not stored in memory**: Streams donâ€™t store data. They operate on the data provided by the source (e.g., collections, arrays).

---

### Stream Operations

#### Intermediate Operations
Intermediate operations transform a stream into another stream. They are **lazy**, meaning they do not execute until a terminal operation is invoked.

- **filter(Predicate<T> predicate)**: Filters elements based on the condition.
- **map(Function<T, R> mapper)**: Transforms elements.
- **distinct()**: Removes duplicates.
- **sorted()**: Sorts elements.
- **peek(Consumer<T> action)**: Performs an action on each element without modifying the stream.

#### Terminal Operations
Terminal operations produce a result, such as a collection or a single value, and mark the end of the stream pipeline.

- **forEach(Consumer<T> action)**: Iterates over elements.
- **collect(Collector<T, A, R> collector)**: Collects elements into a collection (e.g., List, Set).
- **reduce(BinaryOperator<T> accumulator)**: Reduces elements into a single value.
- **count()**: Counts the number of elements.
- **anyMatch(Predicate<T> predicate)**: Returns `true` if any element matches the condition.
- **allMatch(Predicate<T> predicate)**: Returns `true` if all elements match the condition.

---

### Stream Creation

Streams can be created from various data sources like collections, arrays, or I/O channels.

- **From a Collection**:
  `collection.stream()`

- **From an Array**:
  `Arrays.stream(array)`

- **From a Range of Numbers**:
  `IntStream.range(start, end)` // Generates a stream of integers

- **From a File (I/O)**:
  `Files.lines(Paths.get("file.txt"))`

---

### Stream API Syntax

1. **Basic Syntax**:
   ```java
   collection.stream()
             .filter(condition)
             .map(transformation)
             .collect(Collectors.toList());

2. **Filtering and Mapping**:

'''java
Copy code
collection.stream()
          .filter(condition)
          .map(transformation)
          .collect(Collectors.toList());